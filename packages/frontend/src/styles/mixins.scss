/**
 * SCSS混合宏定义
 * 提供可复用的样式模式和工具函数
 */

// 导入变量
@import './variables.scss';

/**
 * 响应式断点混合宏
 * @param {string} $breakpoint - 断点名称 (xs, sm, md, lg, xl, xxl)
 */
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}.";
  }
}

/**
 * 响应式断点混合宏（最大宽度）
 * @param {string} $breakpoint - 断点名称
 */
@mixin respond-below($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: map-get($breakpoints, $breakpoint) - 1px) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}.";
  }
}

/**
 * 响应式断点混合宏（范围）
 * @param {string} $min-breakpoint - 最小断点
 * @param {string} $max-breakpoint - 最大断点
 */
@mixin respond-between($min-breakpoint, $max-breakpoint) {
  @if map-has-key($breakpoints, $min-breakpoint) and map-has-key($breakpoints, $max-breakpoint) {
    @media (min-width: map-get($breakpoints, $min-breakpoint)) and (max-width: map-get($breakpoints, $max-breakpoint) - 1px) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$min-breakpoint} or #{$max-breakpoint}.";
  }
}

/**
 * 清除浮动
 */
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

/**
 * 文本省略号
 * @param {number} $lines - 行数，默认为1
 */
@mixin text-ellipsis($lines: 1) {
  @if $lines == 1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }
}

/**
 * 居中对齐
 * @param {string} $type - 类型 (horizontal, vertical, both)
 */
@mixin center($type: both) {
  position: absolute;
  
  @if $type == horizontal {
    left: 50%;
    transform: translateX(-50%);
  } @else if $type == vertical {
    top: 50%;
    transform: translateY(-50%);
  } @else {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

/**
 * Flexbox居中
 * @param {string} $direction - 方向 (row, column)
 */
@mixin flex-center($direction: row) {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: $direction;
}

/**
 * 按钮样式混合宏
 * @param {color} $bg-color - 背景色
 * @param {color} $text-color - 文字色
 * @param {color} $border-color - 边框色
 * @param {color} $hover-bg - 悬停背景色
 * @param {color} $hover-text - 悬停文字色
 * @param {color} $hover-border - 悬停边框色
 */
@mixin button-variant(
  $bg-color,
  $text-color: $white,
  $border-color: $bg-color,
  $hover-bg: darken($bg-color, 10%),
  $hover-text: $text-color,
  $hover-border: darken($border-color, 10%)
) {
  background-color: $bg-color;
  color: $text-color;
  border-color: $border-color;
  
  &:hover,
  &:focus {
    background-color: $hover-bg;
    color: $hover-text;
    border-color: $hover-border;
  }
  
  &:active {
    background-color: darken($hover-bg, 5%);
    border-color: darken($hover-border, 5%);
  }
  
  &:disabled {
    background-color: lighten($bg-color, 20%);
    color: lighten($text-color, 20%);
    border-color: lighten($border-color, 20%);
    cursor: not-allowed;
    
    &:hover,
    &:focus {
      background-color: lighten($bg-color, 20%);
      color: lighten($text-color, 20%);
      border-color: lighten($border-color, 20%);
    }
  }
}

/**
 * 按钮尺寸混合宏
 * @param {number} $padding-vertical - 垂直内边距
 * @param {number} $padding-horizontal - 水平内边距
 * @param {number} $font-size - 字体大小
 * @param {number} $border-radius - 圆角
 */
@mixin button-size(
  $padding-vertical,
  $padding-horizontal,
  $font-size,
  $border-radius: $border-radius-base
) {
  padding: $padding-vertical $padding-horizontal;
  font-size: $font-size;
  border-radius: $border-radius;
}

/**
 * 输入框样式混合宏
 * @param {number} $height - 高度
 * @param {number} $padding-horizontal - 水平内边距
 * @param {number} $font-size - 字体大小
 */
@mixin input-size($height, $padding-horizontal, $font-size) {
  height: $height;
  padding: 0 $padding-horizontal;
  font-size: $font-size;
  line-height: $height - 2px; // 减去边框宽度
}

/**
 * 卡片样式混合宏
 * @param {number} $padding - 内边距
 * @param {number} $border-radius - 圆角
 * @param {string} $shadow - 阴影
 */
@mixin card(
  $padding: $spacing-base,
  $border-radius: $border-radius-base,
  $shadow: $box-shadow-base
) {
  background-color: $bg-color-overlay;
  border: 1px solid $border-color-lighter;
  border-radius: $border-radius;
  box-shadow: $shadow;
  padding: $padding;
  transition: $transition-base;
  
  &:hover {
    box-shadow: $box-shadow-light;
  }
}

/**
 * 渐变背景混合宏
 * @param {color} $start-color - 起始颜色
 * @param {color} $end-color - 结束颜色
 * @param {string} $direction - 方向
 */
@mixin gradient-bg(
  $start-color,
  $end-color,
  $direction: to right
) {
  background: linear-gradient($direction, $start-color, $end-color);
}

/**
 * 三角形混合宏
 * @param {string} $direction - 方向 (up, down, left, right)
 * @param {number} $size - 大小
 * @param {color} $color - 颜色
 */
@mixin triangle($direction, $size, $color) {
  width: 0;
  height: 0;
  border-style: solid;
  
  @if $direction == up {
    border-width: 0 $size $size $size;
    border-color: transparent transparent $color transparent;
  } @else if $direction == down {
    border-width: $size $size 0 $size;
    border-color: $color transparent transparent transparent;
  } @else if $direction == left {
    border-width: $size $size $size 0;
    border-color: transparent $color transparent transparent;
  } @else if $direction == right {
    border-width: $size 0 $size $size;
    border-color: transparent transparent transparent $color;
  }
}

/**
 * 箭头混合宏
 * @param {string} $direction - 方向
 * @param {number} $size - 大小
 * @param {color} $color - 颜色
 * @param {number} $border-width - 边框宽度
 */
@mixin arrow($direction, $size: 6px, $color: $border-color-base, $border-width: 1px) {
  width: $size;
  height: $size;
  border: $border-width solid $color;
  
  @if $direction == up {
    border-bottom: none;
    border-right: none;
    transform: rotate(45deg);
  } @else if $direction == down {
    border-top: none;
    border-left: none;
    transform: rotate(45deg);
  } @else if $direction == left {
    border-top: none;
    border-right: none;
    transform: rotate(45deg);
  } @else if $direction == right {
    border-bottom: none;
    border-left: none;
    transform: rotate(45deg);
  }
}

/**
 * 滚动条样式混合宏
 * @param {number} $width - 宽度
 * @param {color} $track-color - 轨道颜色
 * @param {color} $thumb-color - 滑块颜色
 * @param {color} $thumb-hover-color - 滑块悬停颜色
 */
@mixin scrollbar(
  $width: 8px,
  $track-color: $fill-color-light,
  $thumb-color: $border-color-dark,
  $thumb-hover-color: $text-color-secondary
) {
  &::-webkit-scrollbar {
    width: $width;
    height: $width;
  }
  
  &::-webkit-scrollbar-track {
    background: $track-color;
    border-radius: $width / 2;
  }
  
  &::-webkit-scrollbar-thumb {
    background: $thumb-color;
    border-radius: $width / 2;
    
    &:hover {
      background: $thumb-hover-color;
    }
  }
}

/**
 * 占位符样式混合宏
 * @param {color} $color - 颜色
 */
@mixin placeholder($color: $text-color-placeholder) {
  &::placeholder {
    color: $color;
    opacity: 1;
  }
  
  &::-webkit-input-placeholder {
    color: $color;
  }
  
  &::-moz-placeholder {
    color: $color;
    opacity: 1;
  }
  
  &:-ms-input-placeholder {
    color: $color;
  }
}

/**
 * 动画混合宏
 * @param {string} $name - 动画名称
 * @param {string} $duration - 持续时间
 * @param {string} $timing-function - 时间函数
 * @param {string} $delay - 延迟时间
 * @param {string} $iteration-count - 迭代次数
 * @param {string} $direction - 方向
 * @param {string} $fill-mode - 填充模式
 */
@mixin animation(
  $name,
  $duration: 1s,
  $timing-function: ease,
  $delay: 0s,
  $iteration-count: 1,
  $direction: normal,
  $fill-mode: both
) {
  animation: $name $duration $timing-function $delay $iteration-count $direction $fill-mode;
}

/**
 * 过渡动画混合宏
 * @param {string} $property - 属性
 * @param {string} $duration - 持续时间
 * @param {string} $timing-function - 时间函数
 * @param {string} $delay - 延迟时间
 */
@mixin transition(
  $property: all,
  $duration: $transition-duration-base,
  $timing-function: $transition-function-ease-in-out-bezier,
  $delay: 0s
) {
  transition: $property $duration $timing-function $delay;
}

/**
 * 阴影混合宏
 * @param {string} $type - 类型 (light, base, dark)
 */
@mixin box-shadow($type: base) {
  @if $type == light {
    box-shadow: $box-shadow-light;
  } @else if $type == base {
    box-shadow: $box-shadow-base;
  } @else if $type == dark {
    box-shadow: $box-shadow-dark;
  }
}

/**
 * 边框混合宏
 * @param {string} $position - 位置 (all, top, right, bottom, left)
 * @param {color} $color - 颜色
 * @param {number} $width - 宽度
 * @param {string} $style - 样式
 */
@mixin border(
  $position: all,
  $color: $border-color-base,
  $width: $border-width-base,
  $style: $border-style-base
) {
  @if $position == all {
    border: $width $style $color;
  } @else {
    border-#{$position}: $width $style $color;
  }
}

/**
 * 绝对定位混合宏
 * @param {number} $top - 顶部距离
 * @param {number} $right - 右侧距离
 * @param {number} $bottom - 底部距离
 * @param {number} $left - 左侧距离
 */
@mixin absolute($top: auto, $right: auto, $bottom: auto, $left: auto) {
  position: absolute;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

/**
 * 固定定位混合宏
 * @param {number} $top - 顶部距离
 * @param {number} $right - 右侧距离
 * @param {number} $bottom - 底部距离
 * @param {number} $left - 左侧距离
 */
@mixin fixed($top: auto, $right: auto, $bottom: auto, $left: auto) {
  position: fixed;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

/**
 * 相对定位混合宏
 * @param {number} $top - 顶部距离
 * @param {number} $right - 右侧距离
 * @param {number} $bottom - 底部距离
 * @param {number} $left - 左侧距离
 */
@mixin relative($top: auto, $right: auto, $bottom: auto, $left: auto) {
  position: relative;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

/**
 * 尺寸混合宏
 * @param {number} $width - 宽度
 * @param {number} $height - 高度
 */
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

/**
 * 最小尺寸混合宏
 * @param {number} $min-width - 最小宽度
 * @param {number} $min-height - 最小高度
 */
@mixin min-size($min-width, $min-height: $min-width) {
  min-width: $min-width;
  min-height: $min-height;
}

/**
 * 最大尺寸混合宏
 * @param {number} $max-width - 最大宽度
 * @param {number} $max-height - 最大高度
 */
@mixin max-size($max-width, $max-height: $max-width) {
  max-width: $max-width;
  max-height: $max-height;
}

/**
 * 隐藏文本混合宏
 */
@mixin hide-text {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}

/**
 * 视觉隐藏混合宏（保持可访问性）
 */
@mixin visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

/**
 * 重置列表样式混合宏
 */
@mixin reset-list {
  list-style: none;
  margin: 0;
  padding: 0;
}

/**
 * 重置按钮样式混合宏
 */
@mixin reset-button {
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  font: inherit;
  color: inherit;
  cursor: pointer;
  outline: none;
}

/**
 * 图片响应式混合宏
 */
@mixin responsive-image {
  max-width: 100%;
  height: auto;
  display: block;
}

/**
 * 容器混合宏
 * @param {number} $max-width - 最大宽度
 * @param {number} $padding - 内边距
 */
@mixin container($max-width: 1200px, $padding: $spacing-base) {
  width: 100%;
  max-width: $max-width;
  margin: 0 auto;
  padding-left: $padding;
  padding-right: $padding;
}

/**
 * 网格系统混合宏
 * @param {number} $columns - 列数
 * @param {number} $gap - 间距
 */
@mixin grid($columns: 12, $gap: $spacing-base) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

/**
 * Flexbox网格混合宏
 * @param {number} $columns - 列数
 * @param {number} $gap - 间距
 */
@mixin flex-grid($columns: 12, $gap: $spacing-base) {
  display: flex;
  flex-wrap: wrap;
  margin: -#{$gap / 2};
  
  > * {
    flex: 0 0 calc(100% / #{$columns} - #{$gap});
    margin: $gap / 2;
  }
}

/**
 * 打印样式混合宏
 */
@mixin print-styles {
  @media print {
    @content;
  }
}

/**
 * 高对比度模式混合宏
 */
@mixin high-contrast {
  @media (prefers-contrast: high) {
    @content;
  }
}

/**
 * 减少动画混合宏
 */
@mixin reduced-motion {
  @media (prefers-reduced-motion: reduce) {
    @content;
  }
}

/**
 * 暗色主题混合宏
 */
@mixin dark-theme {
  @media (prefers-color-scheme: dark) {
    @content;
  }
  
  .dark & {
    @content;
  }
}

/**
 * 亮色主题混合宏
 */
@mixin light-theme {
  @media (prefers-color-scheme: light) {
    @content;
  }
  
  .light & {
    @content;
  }
}